{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","_ref","title","mode","toggleMode","React","createElement","className","href","aria-current","onClick","type","role","id","htmlFor","TextForm","Header","showAlert","text","setTextt","useState","textAreaStyle","backgroundColor","color","Fragment","style","value","onChange","event","target","rows","aria-label","handleUpClick","newText","toUpperCase","handleLowClick","toLowerCase","handleClearText","handleCopy","textArea","document","getElementById","select","navigator","clipboard","writeText","handleExtraSpaces","split","join","handleInverseCase","map","char","filter","word","length","toFixed","Alert","props","alert","lower","charAt","slice","capitalize","msg","App","Mode","setMode","setAlert","message","setTimeout","Router","body","Routes","Route","exact","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.ce965359.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar({\r\n  title = \"Set your Navbar title\",\r\n  mode,\r\n  toggleMode,\r\n}) {\r\n  return (\r\n    <div>\r\n      <nav className={`navbar navbar-expand-lg bg-body-${mode} bg-${mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a\r\n            className={`navbar-brand ${\r\n              mode === \"dark\" ? \"text-white\" : \"text-dark\"\r\n            }`}\r\n            href=\"#\"\r\n          >\r\n            {title}\r\n          </a>\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a\r\n                className={`nav-link ${\r\n                  mode === \"dark\" ? \"text-white\" : \"text-dark\"\r\n                }`}\r\n                aria-current=\"page\"\r\n                href=\"#\"\r\n              >\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a\r\n                className={`nav-link ${\r\n                  mode === \"dark\" ? \"text-white\" : \"text-dark\"\r\n                }`}\r\n                href=\"#\"\r\n              >\r\n                About\r\n              </a>\r\n            </li> */}\r\n          </ul>\r\n\r\n          {/* Dark Mode Toggle */}\r\n          <div className=\"form-check form-switch\">\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={toggleMode}\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className={`form-check-label ${\r\n                mode === \"dark\" ? \"text-white\" : \"text-dark\"\r\n              }`}\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable {mode === \"dark\" ? \"Light\" : \"Dark\"} Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  mode: PropTypes.string.isRequired, // Ensure mode is passed as a required prop\r\n  toggleMode: PropTypes.func.isRequired, // Ensure toggleMode is passed as a required prop\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm({ Header, mode, showAlert }) {\r\n  const [text, setTextt] = useState(\"\");\r\n\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setTextt(newText);\r\n    showAlert(\"Converted to Uppercase\", \"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    setTextt(event.target.value);\r\n  };\r\n\r\n  const handleLowClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setTextt(newText);\r\n    showAlert(\"Converted to Lowercase\", \"success\");\r\n  };\r\n\r\n  const handleClearText = () => {\r\n    setTextt(\"\");\r\n    showAlert(\"Text cleared\", \"success\");\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    var textArea = document.getElementById(\"mytext\");\r\n    textArea.select();\r\n    navigator.clipboard.writeText(textArea.value);\r\n    showAlert(\"Text copied to clipboard\", \"success\");\r\n  };\r\n\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/).join(\" \");\r\n    setTextt(newText);\r\n    showAlert(\"Extra spaces removed\", \"success\");\r\n  };\r\n\r\n  const handleInverseCase = () => {\r\n    let newText = text\r\n      .split(\"\")\r\n      .map((char) =>\r\n        char === char.toLowerCase() ? char.toUpperCase() : char.toLowerCase()\r\n      )\r\n      .join(\"\");\r\n    setTextt(newText);\r\n    showAlert(\"Case inversed\", \"success\");\r\n  };\r\n\r\n  // Conditional styles based on mode\r\n  const textAreaStyle = {\r\n    backgroundColor: mode === \"dark\" ? \"#333\" : \"white\",\r\n    color: mode === \"dark\" ? \"white\" : \"black\",\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div className={`mb-3 ${mode === \"dark\" ? \"text-white\" : \"text-dark\"}`}>\r\n          <h1>{Header}</h1>\r\n          <textarea\r\n            style={textAreaStyle}\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            className=\"form-control\"\r\n            id=\"mytext\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n\r\n        <div\r\n          className=\"btn-group\"\r\n          role=\"group\"\r\n          aria-label=\"Basic outlined example\"\r\n        >\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary\"\r\n            onClick={handleUpClick}\r\n          >\r\n            Convert to Uppercase\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary\"\r\n            onClick={handleLowClick}\r\n          >\r\n            Convert to Lowercase\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary\"\r\n            onClick={handleClearText}\r\n          >\r\n            Clear Text\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary\"\r\n            onClick={handleCopy}\r\n          >\r\n            Copy Text\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary\"\r\n            onClick={handleExtraSpaces}\r\n          >\r\n            Remove Extra Spaces\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary\"\r\n            onClick={handleInverseCase}\r\n          >\r\n            Inverse Case\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div\r\n        className={`container my-2 ${\r\n          mode === \"dark\" ? \"text-white\" : \"text-dark\"\r\n        }`}\r\n      >\r\n        <h2>Your Text Summary</h2>\r\n        <p>\r\n          <b>\r\n            {text.split(/\\s+/).filter((word) => word.length > 0).length} Words\r\n            and {text.length} Characters\r\n          </b>\r\n        </p>\r\n        <p>\r\n          <b>\r\n            {(\r\n              0.008 * text.split(/\\s+/).filter((word) => word.length > 0).length\r\n            ).toFixed(2)}{\" \"}\r\n            Minutes Read\r\n          </b>\r\n        </p>\r\n        <h2>Preview</h2>\r\n        <p>\r\n          {text.length > 0\r\n            ? text\r\n            : \"Enter something in the textbox above to preview it here.\"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport Navbar from \"./Components/Navbar\";\nimport TextForm from \"./Components/TextForm\";\n// import About from \"./Components/About\";\nimport Alert from \"./Components/Alert\";\n\nfunction App() {\n  const [Mode, setMode] = React.useState(\"light\");\n  const [alert, setAlert] = React.useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 3000);\n  };\n\n  const toggleMode = () => {\n    if (Mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#3C3C3C\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  };\n\n  return (\n    <Router>\n      <Navbar title=\"TextUtils\" mode={Mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* Routes define different paths */}\n        <Routes>\n          {/* Define route for home and TextForm */}\n          <Route\n            exact\n            path=\"/\"\n            element={\n              <TextForm\n                showAlert={showAlert}\n                Header=\"Enter text to analyze\"\n                mode={Mode}\n              />\n            }\n          />\n          {/* Uncomment the route for About when you're ready */}\n          {/* <Route exact path=\"/about\" element={<About />} /> */}\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}